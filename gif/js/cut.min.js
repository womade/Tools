$(function() { ({
        options: {
            type: "",
            width: 0,
            height: 0,
            blob: "",
            base64: "",
            frames: [],
            percent: 0
        },
        defaults: {
            holeWidth: 0.7,
            holeHeight: 0.7,
            holeMinWidth: 24,
            holeMinHeight: 24
        },
        init: function() {
            this.fileUrl = window.URL || window.webkitURL,
            this.doc = $(document),
            this.cutContainer = $("#Z-cutContainer"),
            this.resultList = $("#Z-resultList"),
            this.previewImage = $(".Z-previewImage"),
            this.sourceBlock = $("#Z-sourceBlock"),
            this.sourceArea = this.sourceBlock.closest(".cut-source"),
            this.previewArea = $("#Z-preview"),
            this.makerBtn = $("#Z-makerBtn"),
            this.againBtn = $("#Z-uploadAgain"),
            this.widthSelect = $("#Z-widthSelect"),
            this.widthInput = this.widthSelect.find(".Z-widthInput"),
            this.heightInput = this.widthSelect.find(".Z-heightInput"),
            this.cutInfo = $("#Z-cutInfo"),
            this.upload(),
            this.start(),
            this.setRole(),
            this.deleteViewList()
        },
        upload: function() {
            var t = this,
            e = $("#Z-uploadBtn");
            e.on("change",
            function() {
				/*
                if ($("#level").val() <= 10) {
                    alert("升级VIP可用");
                    return false
                }
				*/
                var i = this.files[0];
                if (i) {
                    var o = i.type.toLowerCase(),
                    h = ["image/jpeg", "image/jpg", "image/png"],
                    s = new FileReader;
                    t.againBtn.addClass("disabled").text("上传中..."),
                    t.makerBtn.addClass("disabled"),
                    t.cutContainer.addClass("preview"),
                    s.readAsDataURL(i),
                    s.onload = function(i) {
                        t.options.blob = t.fileUrl.createObjectURL(t.dataURLtoBlob(this.result)),
                        t.options.base64 = this.result,
                        -1 == h.indexOf(o) ? (t.options.type = "gif", t.splitGif()) : t.options.type = "static",
                        t.preview(),
                        e.val("")
                    }
                }
            }),
            t.againBtn.on("click",
            function() {
                e.trigger("click")
            })
        },
        preview: function() {
            var t = this,
            e = new Image;
            e.src = t.options.blob,
            e.onload = function() {
                t.options.width = this.naturalWidth,
                t.options.height = this.naturalHeight,
                t.previewImage.attr("src", t.options.blob),
                t.reset(),
                t.setViewArea(),
                "gif" == t.options.type || "static" == t.options.type && (t.options.frames = [e], t.againBtn.removeClass("disabled").text("重新上传"), t.makerBtn.removeClass("disabled"))
            }
        },
        splitGif: function() {
            var t = this,
            e = t.options || {},
            i = window.atob(e.base64.split(",")[1]);
            playGIF.doParse(new Stream(i),
            function(e, i, o) {
                for (var h = [], s = 0; s < i.length; s++) {
                    h.push({
                        delay: 10 * i[s].delay,
                        data: i[s].data
                    })
                }
                t.options.frames = h,
                t.againBtn.removeClass("disabled").text("重新上传"),
                t.makerBtn.removeClass("disabled")
            })
        },
        start: function() {
            var t = this;
            t.makerBtn.on("click",
            function() {
                $(this).hasClass("disabled") || ($(this).addClass("disabled"), "static" == t.options.type ? t.cutStatic() : "gif" == t.options.type && t.cutGif())
            })
        },
        cutStatic: function() {
            var t = this.getParams(),
            e = this.createCanvas(t.width, t.height);
            e.getContext("2d").drawImage(this.options.frames[0], t.left, t.top, t.width, t.height, 0, 0, t.width, t.height),
            this.resultList.prepend('<li><div class="view-item-image"><img src="' + this.fileUrl.createObjectURL(this.dataURLtoBlob(e.toDataURL())) + '" /></div><div class="delete-btn Z-deleteBtn"><i class="iconfont icon-shanchu1"></i></div><a href="' + this.fileUrl.createObjectURL(this.dataURLtoBlob(e.toDataURL())) + '" download="' + (new Date).getTime() + "_" + parseInt(t.width) + "x" + parseInt(t.height) + '">下载(' + parseInt(t.width) + "*" + parseInt(t.height) + ")</a></li>"),
            this.makerBtn.removeClass("disabled").text("裁剪")
        },
        cutGif: function() {
            var t = this,
            e = t.getParams(),
            i = new GIF({
                workerScript: "/gif/js/gif.help.js",
                background: "#ffffff",
                width: e.width,
                height: e.height,
                quality: 10,
                workers: 4
            });
            i.on("progress",
            function(e) {
                t.makerBtn.text("已完成  " + Math.round(100 * e) + "%")
            }),
            i.on("finished",
            function(i) {
                t.resultList.prepend('<li><div class="view-item-image"><img src="' + t.fileUrl.createObjectURL(i) + '" /></div><div class="delete-btn Z-deleteBtn"><i class="iconfont icon-shanchu1"></i></div><a href="' + t.fileUrl.createObjectURL(i) + '" download="' + (new Date).getTime() + "_" + parseInt(e.width) + "x" + parseInt(e.height) + '">下载(' + parseInt(e.width) + "*" + parseInt(e.height) + ")</a></li>"),
                t.makerBtn.removeClass("disabled").text("裁剪")
            });
            for (var o = 0; o < t.options.frames.length; o++) {
                var h = t.options.frames[o],
                s = t.createCanvas(h.data.width, h.data.height);
                s.getContext("2d").putImageData(h.data, 0, 0);
                var n = t.createCanvas(e.width, e.height).getContext("2d");
                n.drawImage(s, e.left, e.top, e.width, e.height, 0, 0, e.width, e.height),
                i.addFrame(n, {
                    delay: h.delay
                })
            }
            i.render()
        },
        getParams: function() {
            var t = this.options || {},
            e = this.getHoleSize(),
            i = this.sourceBlock.width();
            return {
                width: t.width > i ? t.width / i * e.width: e.width,
                height: t.width > i ? t.width / i * e.height: e.height,
                top: t.width > i ? t.width / i * e.top: e.top,
                left: t.width > i ? t.width / i * e.left: e.left
            }
        },
        createCanvas: function(t, e) {
            var i = document.createElement("canvas");
            return i.width = t,
            i.height = e,
            i
        },
        move: function() {
            var t = this,
            e = !0;
            t.hole.on("mousedown",
            function(i) {
                e = !1;
                var o = i.clientX,
                h = i.clientY,
                s = t.getHoleSize(),
                n = t.sourceBlock.width(),
                a = t.sourceBlock.height();
                util.forbiddenSelect(),
                t.doc.off().on("mousemove",
                function(i) {
                    if (!e) {
                        var l = s.top + i.clientY - h,
                        d = s.left + i.clientX - o;
                        l = l > 0 ? l < a - s.height ? l: a - s.height: 0,
                        d = d > 0 ? d < n - s.width ? d: n - s.width: 0,
                        t.hole.css({
                            top: l,
                            left: d
                        }),
                        t.setViewArea()
                    }
                }).on("mouseup",
                function(i) {
                    e = !0,
                    t.doc.off("mousemove"),
                    util.autoSelect()
                })
            }),
            t.hole.find(".bar2,.border1").on("mousedown",
            function(i) {
                i.stopPropagation(),
                util.forbiddenSelect();
                var o = i.clientY,
                h = t.getHoleSize();
                t.options.percent || (e = !1),
                t.doc.off().on("mousemove",
                function(i) {
                    if (!e) {
                        var s = i.clientY - o;
                        s = s < 0 ? Math.abs(s) < h.top ? s: -1 * h.top: s < h.height - t.defaults.holeMinHeight ? s: h.height - t.defaults.holeMinHeight,
                        t.hole.css({
                            top: h.top + s
                        }).height(h.height - s),
                        t.setViewArea()
                    }
                }).on("mouseup",
                function(i) {
                    e = !0,
                    t.doc.off("mousemove"),
                    util.autoSelect()
                })
            }),
            t.hole.find(".bar4,.border2").on("mousedown",
            function(i) {
                i.stopPropagation(),
                util.forbiddenSelect();
                var o = i.clientX,
                h = t.getHoleSize(),
                s = t.sourceBlock.width(),
                n = h.left + h.width;
                t.options.percent || (e = !1),
                t.doc.off().on("mousemove",
                function(i) {
                    if (!e) {
                        var a = i.clientX - o;
                        a = a < 0 ? a < n ? a: -1 * n: a < s - n ? a: s - n,
                        t.hole.width(h.width + a),
                        t.setViewArea()
                    }
                }).on("mouseup",
                function(i) {
                    e = !0,
                    t.doc.off("mousemove"),
                    util.autoSelect()
                })
            }),
            t.hole.find(".bar6,.border3").on("mousedown",
            function(i) {
                i.stopPropagation(),
                util.forbiddenSelect();
                var o = i.clientY,
                h = t.getHoleSize(),
                s = t.sourceBlock.height(),
                n = h.top + h.height;
                t.options.percent || (e = !1),
                t.doc.off().on("mousemove",
                function(i) {
                    if (!e) {
                        var a = i.clientY - o;
                        a = a < 0 ? a < n ? a: -1 * n: a < s - n ? a: s - n,
                        t.hole.height(h.height + a),
                        t.setViewArea()
                    }
                }).on("mouseup",
                function(i) {
                    e = !0,
                    t.doc.off("mousemove"),
                    util.autoSelect()
                })
            }),
            t.hole.find(".bar8,.border4").on("mousedown",
            function(i) {
                i.stopPropagation(),
                util.forbiddenSelect();
                var o = i.clientX,
                h = t.getHoleSize();
                t.options.percent || (e = !1),
                t.doc.off().on("mousemove",
                function(i) {
                    if (!e) {
                        var s = i.clientX - o;
                        s = s < 0 ? Math.abs(s) < h.left ? s: -1 * h.left: s < h.width - t.defaults.holeMinWidth ? s: h.width - t.defaults.holeMinWidth,
                        t.hole.css({
                            left: h.left + s
                        }).width(h.width - s),
                        t.setViewArea()
                    }
                }).on("mouseup",
                function(i) {
                    e = !0,
                    t.doc.off("mousemove"),
                    util.autoSelect()
                })
            }),
            t.hole.find(".bar1").on("mousedown",
            function(i) {
                i.stopPropagation(),
                util.forbiddenSelect(),
                e = !1;
                var o = i.clientX,
                h = i.clientY,
                s = t.getHoleSize();
                t.doc.off().on("mousemove",
                function(i) {
                    if (!e) {
                        var n = i.clientY - h,
                        a = i.clientX - o;
                        n = n < 0 ? Math.abs(n) < s.top ? n: -1 * s.top: n < s.height - t.defaults.holeMinHeight ? n: s.height - t.defaults.holeMinHeight,
                        a = a < 0 ? Math.abs(a) < s.left ? a: -1 * s.left: a < s.width - t.defaults.holeMinWidth ? a: s.width - t.defaults.holeMinWidth,
                        t.options.percent ? t.options.width > t.options.height ? t.hole.css({
                            top: s.top + n,
                            left: s.left + (s.width - (s.height - n) / s.height * s.width)
                        }).width((s.height - n) / s.height * s.width).height(s.height - n) : t.hole.css({
                            top: s.top + (s.height - (s.width - a) / s.width * s.height),
                            left: s.left + a
                        }).width(s.width - a).height((s.width - a) / s.width * s.height) : t.hole.css({
                            top: s.top + n,
                            left: s.left + a
                        }).width(s.width - a).height(s.height - n),
                        t.setViewArea()
                    }
                }).on("mouseup",
                function(i) {
                    e = !0,
                    t.doc.off("mousemove"),
                    util.autoSelect()
                })
            }),
            t.hole.find(".bar3").on("mousedown",
            function(i) {
                i.stopPropagation(),
                util.forbiddenSelect(),
                e = !1;
                var o = i.clientX,
                h = i.clientY,
                s = t.getHoleSize(),
                n = t.sourceBlock.width(),
                a = s.left + s.width;
                t.doc.off().on("mousemove",
                function(i) {
                    if (!e) {
                        var l = i.clientX - o,
                        d = i.clientY - h;
                        d = d < 0 ? Math.abs(d) < s.top ? d: -1 * s.top: d < s.height - t.defaults.holeMinHeight ? d: s.height - t.defaults.holeMinHeight,
                        l = l < 0 ? Math.abs(l) < s.width - t.defaults.holeMinWidth ? l: -1 * (s.width - t.defaults.holeMinWidth) : l < n - a ? l: n - a,
                        t.options.percent ? t.options.width > t.options.height ? t.hole.css({
                            top: s.top + d
                        }).width((s.height - d) / s.height * s.width).height(s.height - d) : t.hole.css({
                            top: s.top - (s.height - (s.width - l) / s.width * s.height)
                        }).width(s.width + l).height((s.width + l) / s.width * s.height) : t.hole.css({
                            top: s.top + d
                        }).width(s.width + l).height(s.height - d),
                        t.setViewArea()
                    }
                }).on("mouseup",
                function(i) {
                    e = !0,
                    t.doc.off("mousemove"),
                    util.autoSelect()
                })
            }),
            t.hole.find(".bar5").on("mousedown",
            function(i) {
                i.stopPropagation(),
                util.forbiddenSelect(),
                e = !1;
                var o = i.clientX,
                h = i.clientY,
                s = t.getHoleSize(),
                n = t.sourceBlock.width(),
                a = t.sourceBlock.height(),
                l = s.left + s.width,
                d = s.top + s.height;
                t.doc.off().on("mousemove",
                function(i) {
                    if (!e) {
                        var c = i.clientX - o,
                        r = i.clientY - h;
                        r = r < 0 ? Math.abs(r) < s.height - t.defaults.holeMinHeight ? r: -1 * (s.height - t.defaults.holeMinHeight) : r < a - d ? r: a - d,
                        c = c < 0 ? Math.abs(c) < s.width - t.defaults.holeMinWidth ? c: -1 * (s.width - t.defaults.holeMinWidth) : c < n - l ? c: n - l,
                        t.options.percent ? t.options.width > t.options.height ? t.hole.width((s.height + r) / s.height * s.width).height(s.height + r) : t.hole.width(s.width + c).height((s.width + c) / s.width * s.height) : t.hole.width(s.width + c).height(s.height + r),
                        t.setViewArea()
                    }
                }).on("mouseup",
                function(i) {
                    e = !0,
                    t.doc.off("mousemove"),
                    util.autoSelect()
                })
            }),
            t.hole.find(".bar7").on("mousedown",
            function(i) {
                i.stopPropagation(),
                util.forbiddenSelect(),
                e = !1;
                var o = i.clientX,
                h = i.clientY,
                s = t.getHoleSize(),
                n = t.sourceBlock.height(),
                a = s.top + s.height;
                t.doc.off().on("mousemove",
                function(i) {
                    if (!e) {
                        var l = i.clientX - o,
                        d = i.clientY - h;
                        d = d < 0 ? Math.abs(d) < s.height - t.defaults.holeMinHeight ? d: -1 * (s.height - t.defaults.holeMinHeight) : d < n - a ? d: n - a,
                        l = l < 0 ? Math.abs(l) < s.left ? l: -1 * s.left: l < s.width - t.defaults.holeMinWidth ? l: s.width - t.defaults.holeMinWidth,
                        t.options.percent ? t.options.width > t.options.height ? t.hole.css({
                            left: s.left + (s.width - (s.height + d) / s.height * s.width)
                        }).width((s.height + d) / s.height * s.width).height(s.height + d) : t.hole.css({
                            left: s.left + l
                        }).width(s.width - l).height((s.width - l) / s.width * s.height) : t.hole.css({
                            left: s.left + l
                        }).width(s.width - l).height(s.height + d),
                        t.setViewArea()
                    }
                }).on("mouseup",
                function(i) {
                    e = !0,
                    t.doc.off("mousemove"),
                    util.autoSelect()
                })
            })
        },
        setViewArea: function(t) {
            var e = this.getMask(),
            i = this.getHoleSize(),
            o = this.sourceBlock.width() - i.left - i.width,
            h = this.sourceBlock.height() - i.top - i.height;
            e.top.css({
                height: i.top,
                left: i.left,
                right: o
            }),
            e.right.css({
                width: o,
                top: 0,
                bottom: 0
            }),
            e.bottom.css({
                height: h,
                right: o,
                left: i.left
            }),
            e.left.css({
                width: i.left,
                top: 0,
                bottom: 0
            }),
            this.previewArea.height(this.sourceBlock.height()).find(".cut-preview-hole").css({
                width: i.width,
                height: i.height
            }).find(".Z-previewImage").css({
                top: -1 * i.top,
                left: -1 * i.left
            }),
            this.setInfo(t)
        },
        reset: function() {
            var t, e, i = this.options || {},
            o = this.getMask(),
            h = this.sourceBlock.width(),
            s = this.sourceBlock.height(),
            n = i.width < h ? i.height: h / i.width * i.height,
            a = i.width < h ? i.width: h;
            i.percent && (a > n ? a = n * i.percent: a < n ? n = a * i.percent: a *= i.percent),
            t = (s - n * this.defaults.holeHeight) / 2,
            e = (h - a * this.defaults.holeWidth) / 2,
            this.hole.css({
                top: t,
                left: e,
                width: a * this.defaults.holeHeight,
                height: n * this.defaults.holeWidth
            }),
            o.top.css({
                height: (s - this.defaults.holeHeight * n) / 2,
                top: 0,
                left: 0,
                right: 0
            }),
            o.right.css({
                width: e,
                right: 0,
                top: t,
                bottom: t
            }),
            o.bottom.css({
                height: (s - this.defaults.holeHeight * n) / 2,
                right: 0,
                bottom: 0,
                left: 0
            }),
            o.left.css({
                width: e,
                top: t,
                bottom: t,
                left: 0
            }),
            this.previewImage.css({
                top: 0,
                left: 0
            }),
            this.previewArea.height(s).find(".cut-preview-hole").css({
                width: this.getHoleSize().width,
                height: this.getHoleSize().height
            }).find(".Z-previewImage").css({
                top: -1 * t,
                left: -1 * e
            }),
            s >= 300 ? (this.previewArea.css("line-height", s - 5 + "px"), this.sourceArea.css("line-height", 0)) : (this.previewArea.css("line-height", "295px"), this.sourceArea.css("line-height", "295px")),
            this.setInfo()
        },
        getMask: function() {
            if (!this.mask) {
                this.mask = {
                    top: $('<div class="cut-source-mask">'),
                    right: $('<div class="cut-source-mask">'),
                    bottom: $('<div class="cut-source-mask">'),
                    left: $('<div class="cut-source-mask">')
                };
                for (var t in this.mask) {
                    this.sourceBlock.append(this.mask[t])
                }
            }
            return this.hole || (this.hole = $('<div class="cut-source-hole">                            <div class="cut-source-hole-bar bar1"></div>                            <div class="cut-source-hole-bar bar2"></div>                            <div class="cut-source-hole-bar bar3"></div>                            <div class="cut-source-hole-bar bar4"></div>                            <div class="cut-source-hole-bar bar5"></div>                            <div class="cut-source-hole-bar bar6"></div>                            <div class="cut-source-hole-bar bar7"></div>                            <div class="cut-source-hole-bar bar8"></div>                            <div class="border border1"></div>                            <div class="border border2"></div>                            <div class="border border3"></div>                            <div class="border border4"></div>                        </div>'), this.sourceBlock.append(this.hole), this.move()),
            this.mask
        },
        deleteViewList: function() {
            this.resultList.on("click", ".Z-deleteBtn",
            function() {
                $(this).closest("li").remove()
            })
        },
        setRole: function() {
            var t = this;
            t.widthSelect.on("click", "span",
            function() {
                $(this).hasClass("active") || (t.options.percent = $(this).data("percent"), t.widthSelect.find("span").removeClass("active"), $(this).addClass("active"), t.options.percent ? t.sourceArea.addClass("fixed-size") : t.sourceArea.removeClass("fixed-size"), t.widthInput.val(""), t.heightInput.val(""), t.reset())
            }),
            t.widthInput.on("input",
            function() {
                var e = $(this).val();
                if (util.isNum(e)) {
                    var i = t.options.width - t.hole.position().left / t.sourceBlock.width() * t.options.width;
                    e = e < i ? e > t.defaults.holeMinWidth ? e: t.defaults.holeMinWidth: i,
                    t.options.percent = 0,
                    t.widthSelect.find("span").removeClass("active"),
                    t.widthSelect.find("span:eq(0)").addClass("active"),
                    t.sourceArea.removeClass("fixed-size"),
                    t.hole.width(Math.ceil(e * t.sourceBlock.width() / t.options.width)),
                    t.setViewArea(!0)
                }
            }),
            t.heightInput.on("input",
            function() {
                var e = $(this).val();
                if (util.isNum(e)) {
                    var i = t.options.height - t.hole.position().top / t.sourceBlock.height() * t.options.height;
                    e = e < i ? e > t.defaults.holeMinHeight ? e: t.defaults.holeMinHeight: i,
                    t.options.percent = 0,
                    t.widthSelect.find("span").removeClass("active"),
                    t.widthSelect.find("span:eq(0)").addClass("active"),
                    t.sourceArea.removeClass("fixed-size"),
                    t.hole.height(Math.ceil(e * t.sourceBlock.height() / t.options.height)),
                    t.setViewArea(!0)
                }
            })
        },
        setInfo: function(t) {
            var e = this.getParams();
            this.cutInfo.text("原图尺寸：" + this.options.width + "*" + this.options.height + " 裁剪尺寸：" + parseInt(e.width) + "*" + parseInt(e.height)),
            this.options.percent || t || (this.widthInput.val(parseInt(e.width)), this.heightInput.val(parseInt(e.height)))
        },
        getHoleSize: function() {
            var t = this.hole.position(),
            e = this.hole[0].style;
            return {
                width: Number(e.width.replace("px", "")),
                height: Number(e.height.replace("px", "")),
                top: t.top,
                left: t.left
            }
        },
        dataURLtoBlob: function(t) {
            for (var e = t.split(","), i = e[0].match(/:(.*?);/)[1], o = atob(e[1]), h = o.length, s = new Uint8Array(h); h--;) {
                s[h] = o.charCodeAt(h)
            }
            return new Blob([s], {
                type: i
            })
        }
    }).init()
});